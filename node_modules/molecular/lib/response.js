'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

const res = Symbol();

const validStatusCodes = [
// 1xx - Informational
100, 101, 102,
// 2xx - Success
200, 201, 202, 203, 204, 205, 206, 207, 208, 226,
// 3xx - Redirection
300, 301, 302, 303, 304, 305, 306, 307, 308,
// 4xx - Client error
400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 426, 428, 429, 431, 451,
// 5xx - Server error
500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511];

let WebResponse = (function () {
  function WebResponse(response) {
    _classCallCheck(this, WebResponse);

    if (!(response instanceof _http2['default'].ServerResponse)) {
      throw new Error('response must be an ServerResponse');
    }

    this[res] = response;
  }

  _createClass(WebResponse, [{
    key: 'getHeader',
    value: function getHeader() {
      var _res;

      return (_res = this[res]).getHeader.apply(_res, arguments);
    }
  }, {
    key: 'setHeader',
    value: function setHeader() {
      var _res2;

      return (_res2 = this[res]).setHeader.apply(_res2, arguments);
    }
  }, {
    key: 'send',
    value: function send(data) {
      let contentType = this.getHeader('Content-Type');
      if (typeof contentType === 'undefined') {
        if (typeof data === 'string') {
          this.setHeader('Content-Type', 'text/html');
        } else if (Buffer.isBuffer(data)) {
          this.setHeader('Content-Type', 'application/octet-stream');
        } else if (Array.isArray(data) || data && typeof data === 'object') {
          this.setHeader('Content-Type', 'application/json');
        }
      }
      if (!Buffer.isBuffer(data)) {
        if (typeof data === 'string') {
          data = new Buffer(data);
        } else {
          data = new Buffer(JSON.stringify(data));
        }
      }
      let contentLength = this.getHeader('Content-Length');
      if (typeof contentLength === 'undefined') {
        this.setHeader('Content-Length', data.length);
      }
      this[res].write(data);
      this[res].end('');
    }
  }, {
    key: 'statusCode',
    get: function get() {
      return this[res].statusCode;
    },
    set: function set(value) {
      if (!validStatusCodes.some(code => code === value)) {
        throw new Error('Invalid or unsupported status code.');
      }
      this[res].statusCode = value;
    }
  }]);

  return WebResponse;
})();

exports['default'] = WebResponse;
module.exports = exports['default'];