'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _route = require('./route');

var _route2 = _interopRequireDefault(_route);

const routes = Symbol();

let Router = (function () {
  function Router() {
    _classCallCheck(this, Router);

    this[routes] = [];
  }

  _createClass(Router, [{
    key: 'register',
    value: function register(route) {
      if (!(route instanceof _route2['default'])) {
        throw new Error('register must be called with a Route instance');
      }

      if (this.find(route)) {
        throw new Error('Route already registered; must be unregistered first');
      } else {
        this[routes].push(route);
      }
    }
  }, {
    key: 'unregister',
    value: function unregister(route) {
      if (!(route instanceof _route2['default'])) {
        throw new Error('unregister must be called with a Route instance');
      }

      let index = this[routes].findIndex(existingRoute => existingRoute.toString() === route.toString());

      if (index !== -1) {
        this[routes].splice(index, 1);
      }
    }
  }, {
    key: 'find',
    value: function find(route) {
      if (!(route instanceof _route2['default'])) {
        throw new Error('find must be called with a Route instance');
      }

      return this[routes].find(existingRoute => existingRoute.toString() === route.toString());
    }
  }, {
    key: 'getRoute',
    value: function getRoute(path) {
      if (typeof path !== 'string') {
        throw new Error('path must be a string');
      }

      return this[routes].find(route => route.matches(path));
    }
  }]);

  return Router;
})();

exports['default'] = Router;
module.exports = exports['default'];