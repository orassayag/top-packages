'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _route = require('./route');

var _route2 = _interopRequireDefault(_route);

const name = Symbol();

let Molecule = (function () {
  function Molecule(_ref) {
    let moleculeName = _ref.name;
    var _ref$routes = _ref.routes;
    let routes = _ref$routes === undefined ? [] : _ref$routes;
    let register = _ref.register;

    _classCallCheck(this, Molecule);

    if (typeof moleculeName !== 'string') {
      throw new Error('Molecule name must be a string');
    }
    if (!/^[a-z_]([a-z0-9_\-]*[a-z0-9_])?$/i.test(moleculeName)) {
      throw new Error('Molecule name must: \n' + '* contain only alphanumeric characters, _, or - \n' + '* start with an alphabetic character or _ \n' + '* cannot end with a -');
    }
    if (!routes || !Array.isArray(routes)) {
      throw new Error('Molecule routes must be defined as an array');
    }
    if (register && typeof register !== 'function') {
      throw new Error('Molecule register hook must be defined as a function');
    }
    if (routes.length) {
      routes = routes.map(route => route instanceof _route2['default'] ? route : new _route2['default'](route));
    }
    this[name] = moleculeName;
    this.routes = routes;
    this.register = register;
  }

  _createClass(Molecule, [{
    key: 'name',
    get: function get() {
      return this[name];
    }
  }]);

  return Molecule;
})();

exports['default'] = Molecule;
module.exports = exports['default'];