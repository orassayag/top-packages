'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _moleculeRegistry = require('./molecule-registry');

var _moleculeRegistry2 = _interopRequireDefault(_moleculeRegistry);

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

var _response = require('./response');

var _response2 = _interopRequireDefault(_response);

let Server = (function (_MoleculeRegistry) {
  _inherits(Server, _MoleculeRegistry);

  function Server() {
    _classCallCheck(this, Server);

    _get(Object.getPrototypeOf(Server.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Server, [{
    key: 'listen',
    value: function listen() {
      let server = _http2['default'].createServer((rawReq, rawRes) => {
        let req = new _request2['default'](rawReq);
        let res = new _response2['default'](rawRes);
        let route = this.getRoute(rawReq.url);
        let handlers = route ? route.getHandlers(rawReq.method) : [];
        if (handlers.length) {
          console.log(rawReq.method + ' ' + rawReq.url);
          handlers[0]({ req: req, res: res });
        } else {
          console.log(rawReq.method + ' ' + rawReq.url + ' 404');
          res.statusCode = 404;
          res.send('Not found');
        }
      }).on('error', err => console.log(err));
      for (let port of this.httpPorts) {
        server.listen(port);
        console.log('[HTTP] Listening on port ' + port + '...');
      }
    }
  }], [{
    key: 'createServer',
    value: function createServer() {
      return new Server();
    }
  }]);

  return Server;
})(_moleculeRegistry2['default']);

exports['default'] = Server;
module.exports = exports['default'];